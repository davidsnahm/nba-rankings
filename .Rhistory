time
head(time)
time <- character()
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
time <- c(time, meta(corp[[i]], tag="heading"))
}
}
head(time)
time <- character()
ticks <- character()
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
time <- c(time, meta(corp[[i]], tag="heading"))
}
}
ticks
time
time <- character()
ticks <- character()
dates <- numeric(0)
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
time <- c(time, meta(corp[[i]], tag="heading"))
dates <- c(dates, meta(corp[[i]], tag="datetimestamp"))
}
}
dates
head(dates)
time <- character()
ticks <- character()
dates <- numeric(0)
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
time <- c(time, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.Date(meta(corp[[i]], tag="datetimestamp")))
}
}
head(dates)
dates
ticks
heads <- character()
ticks <- character()
dates <- numeric(0)
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
print(meta(corp[[i]], tag="datetimestamp"))
dates <- c(dates, as.Date(meta(corp[[i]], tag="datetimestamp")))
}
}
dates <- Date()
dates <- .POSIXct(character())
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
print(meta(corp[[i]], tag="datetimestamp"))
dates <- c(dates, meta(corp[[i]], tag="datetimestamp"))
}
}
dates
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
print(meta(corp[[i]], tag="datetimestamp"))
dates <- c(dates, as.POSIXct((meta(corp[[i]], tag="datetimestamp"))))
}
}
dates
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
print(meta(corp[[i]], tag="datetimestamp"))
dates <- c(dates, as.POSIXct((meta(corp[[i]], tag="datetimestamp")), tz="EST"))
}
}
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct((meta(corp[[i]], tag="datetimestamp")), tz="EST"))
}
}
dates
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="EST"))
}
}
dates
as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="EST")
as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(time, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
dates
length(dates)
length(ticks)
length(heads)
heads
dates
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for (i in 1:20) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
length(heads)
length(ticks)
length(dates)
df <- data.frame(ticks, heads, dates)
head(df)
View(df)
View(df)
?GoogleNewsSource
corp <- WebCorpus(GoogleFinanceSource(stock, maxconnects=40))
corp[[1]]
corp[[30]]
corp <- WebCorpus(GoogleFinanceSource(stock, num=40))
corp[[30]]
corp <- WebCorpus(GoogleFinanceSource(stock, params=(num=40)))
corp <- WebCorpus(GoogleFinanceSource(stock, params=list(num=40)))
corp <- WebCorpus(GoogleFinanceSource(stock, params=list(start=0, num=40)))
corp <- WebCorpus(GoogleFinanceSource(stock, params=list(h1="en", start=0, num=40)))
corp <- WebCorpus(GoogleFinanceSource(stock, params=list(h1="en", q=stock, ie="utf-8", start=0, num=40, output="rss")))
for(i in 1:3){}
for(i in 1:3){print(i)}
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for (i in 1:40) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
df <- data.frame(ticks, heads, dates)
View(df)
require(qdap)
require(slam)
stocks <- c("AAPL, GOOGL, AMZN, MSFT, YHOO, TWTR, NFLX, FB")
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for(s in stocks) {
corp <- WebCorpus(GoogleFinanceSource(s, params=list(h1="en", q=s, ie="utf-8", start=0, num=30, output="rss")))
for (i in 1:40) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
}
df <- data.frame(ticks, heads, dates)
stocks <- c("AAPL", "GOOGL", "AMZN", "MSFT", "YHOO", "TWTR", "NFLX", "FB")
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for(s in stocks) {
corp <- WebCorpus(GoogleFinanceSource(s, params=list(h1="en", q=s, ie="utf-8", start=0, num=30, output="rss")))
for (i in 1:40) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
}
df <- data.frame(ticks, heads, dates)
stocks <- c("AAPL", "GOOGL", "AMZN", "MSFT", "YHOO", "TWTR", "NFLX", "FB")
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for(s in stocks) {
corp <- WebCorpus(GoogleFinanceSource(s, params=list(h1="en", q=s, ie="utf-8", start=0, num=30, output="rss")))
for (i in 1:30) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, stock)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
}
df <- data.frame(ticks, heads, dates)
View(df)
stocks <- c("AAPL", "GOOGL", "AMZN", "MSFT", "YHOO", "TWTR", "NFLX", "FB")
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
#as.POSIXct(meta(corp[[1]], tag="datetimestamp"), tz="GMT")
for(s in stocks) {
corp <- WebCorpus(GoogleFinanceSource(s, params=list(h1="en", q=s, ie="utf-8", start=0, num=30, output="rss")))
for (i in 1:30) {
if(scoreCorpus(corp[[i]], positive.words, negative.words) >= .5){
ticks <- c(ticks, s)
heads <- c(heads, meta(corp[[i]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[i]], tag="datetimestamp"), tz="GMT"))
}
}
}
df <- data.frame(ticks, heads, dates)
View(df)
negs <- read.table("~/Desktop/usa/usaprojectfall15/usaprojectfall15/finance/negative-words.txt", quote="\"", comment.char="")
View(negs)
head(negs)
"hello" %in% negs
"abrasive" %in% negs
"awful" %in% negs
head(negative.words)
hw07 <- read.csv("~/Desktop/soc7/hw07.csv")
View(hw07)
mod <- lm(Expenditures ~ GDP, data=hw07)
summary(mod)
mod <- lm(Expenditures ~ Unemployment+Sugar+Alcohol+GDP, data=hw07)
summary(mod)
qplot(GDP, Expenditures, data=hw07)
require(mosaic)
qplot(GDP, Expenditures, data=hw07)
headers <- meta(corp, tag="heading")
library(tm)
library(tm.plugin.sentiment)
library(tm.plugin.webmining)
headers <- meta(corp, tag="heading")
View(df)
library(tm)
library(tm.plugin.sentiment)
library(tm.plugin.webmining)
# might have to install these
require(slam)
require(qdap)
pacman::p_load(sentimentr)
companies <- read.csv("~/Downloads/companylist.csv")
stocks <- sample(companies$Symbol, 30)
for(i in 1:30){
assign(paste("c", i, sep=""), WebCorpus(GoogleFinanceSource(stocks[i], params=list(h1="en", q=stocks[i], ie="utf-8", start=0, num=15, output="rss"))))
}
corpii <- list(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30)
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
pos_neg <- character()
for(i in 1:length(stocks)) {
corp <- corpii[i][[1]]$content
for(j in 1:15){
if(!is.null(corp[])){
score <- sentiment_by(corp[[1]]$content)
if(is.na(score$ave_sentiment[1])){
break
}else if(score$ave_sentiment[1] >= .1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "pos")
} else if(score$ave_sentiment[1] <= -.1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "neg")
}
}
}
}
df <- data.frame(ticks, heads, dates, pos_neg)
corpii[1]
corpii[2]
corpii[1][[1]]$content[[15]]$content
corpii[2][[1]]$content[[15]]$content
corpii[3][[1]]$content[[15]]$content
corpii[5][[1]]$content[[15]]$content
corpii[6][[1]]$content[[15]]$content
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
pos_neg <- character()
for(i in 1:length(stocks)) {
corp <- corpii[i][[1]]$content
for(j in 1:15){
if(!is.null(corp[])){
score <- sentiment_by(corp[[j]]$content)
if(is.na(score$ave_sentiment[1])){
break
}else if(score$ave_sentiment[1] >= .1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "pos")
} else if(score$ave_sentiment[1] <= -.1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "neg")
}
}
}
}
df <- data.frame(ticks, heads, dates, pos_neg)
corpii[1][[1]]$content
length(corpii[1][[1]]$content)
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
pos_neg <- character()
for(i in 1:length(stocks)) {
corp <- corpii[i][[1]]$content
for(j in 1:length(corp)){
if(!is.null(corp[])){
score <- sentiment_by(corp[[j]]$content)
if(is.na(score$ave_sentiment[1])){
break
}else if(score$ave_sentiment[1] >= .1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "pos")
} else if(score$ave_sentiment[1] <= -.1){
ticks <- c(ticks, stocks[i])
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "neg")
}
}
}
}
df <- data.frame(ticks, heads, dates, pos_neg)
View(df)
stocks
stocks[1]
as.character(stocks[1])
heads <- character()
ticks <- character()
dates <- .POSIXct(character())
pos_neg <- character()
for(i in 1:length(stocks)) {
corp <- corpii[i][[1]]$content
for(j in 1:length(corp)){
if(!is.null(corp[])){
score <- sentiment_by(corp[[j]]$content)
if(is.na(score$ave_sentiment[1])){
break
}else if(score$ave_sentiment[1] >= .1){
ticks <- c(ticks, as.character(stocks[i]))
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "pos")
} else if(score$ave_sentiment[1] <= -.1){
ticks <- c(ticks, as.character(stocks[i]))
heads <- c(heads, meta(corp[[j]], tag="heading"))
dates <- c(dates, as.POSIXct(meta(corp[[j]], tag="datetimestamp"), tz="GMT"))
pos_neg <- c(pos_neg, "neg")
}
}
}
}
df <- data.frame(ticks, heads, dates, pos_neg)
View(df)
write.csv(df, file="~/Desktop/usa/stocks.csv")
sentiment_by("Company shares of MOBL drops by -2.53%")
corpii[1][[1]]$content[[1]]$content
corpii[1][[1]]$content[[2]]$content
hw8 <- read.csv("~/Desktop/soc7/hw8.csv")
View(hw8)
hw8 <- read.csv("~/Desktop/soc7/hw8.csv")
View(hw8)
mod <- lm(Exp ~ Unemp, data=hw8)
summary(mod)
mod <- lm(Exp ~ Sugar, data=hw8)
summary(mod)
mod <- lm(Exp ~ Alcohol, data=hw8)
summary(mod)
mod <- lm(Exp ~ GDP, data=hw8)
summary(mod)
mod <- lm(Exp ~ Unemp + Sugar + Alcohol + GDP, data=hw8)
summary(mod)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
qplot(Male, data=project)
require(mosaic)
qplot(Male, data=project)
qplot(Feale, data=project)
qplot(Female, data=project)
t.test(Male, Female, data=project)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
t.test(X18.20, X21.24, data=project)
sd(X18.20, data=project)
sd(X21.24, data=project)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
mod <- lm(Total ~ Year, data=project)
summary(mod)
plot(mod)
project <- read.csv("~/Desktop/soc7/project.csv")
mod <- lm(Total ~ Year, data=project)
summary(mod)
View(project)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
mod <- lm(Alcohol ~ Year, data=project)
summary(mod)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
mod <- lm(Reports ~ Year, data=project)
summary(mod)
project <- read.csv("~/Desktop/soc7/project.csv")
View(project)
mod <- lm(Cocaine ~ Year, data=project)
summary(mod)
mod <- lm(Heroin ~ Year, data=project)
summary(mod)
mod <- lm(Marijuana ~ Year, data=project)
summary(mod)
mod <- lm(Ecstasy ~ Year, data=project)
summary(mod)
mod <- lm(LSD ~ Year, data=project)
summary(mod)
library(maptools)
library(ggplot2)
library(RColorBrewer)
library(scales)
# Link to shapefile: https://data.sfgov.org/Geographic-Locations-and-Boundaries/Election-Precincts-Zipped-Shapefile-Format-/w3ua-z2my
# reading in shapefile from wherever you have it
shpfile <- '~/Downloads/elect_precincts/Elect_Precincts.shp'
poly = readShapeSpatial(shpfile)
test <- fortify(poly, region="prec_2012")
plot(poly)
ggplot() + geom_map(data=total_data_new, aes(map_id=id, fill=totreg_r), map=test) + expand_limits(x=test$long, y=test$lat) + scale_fill_gradient(limits=c(443, 801), name="Total Registered Voters") + labs(title="Map of SF Precincts (2014)") + theme(panel.background=element_blank(), axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), axis.ticks=element_blank(), text=element_text(family="Trebuchet MS"))
my_greens <- brewer.pal(5, 'Greens')
new_greens <- my_greens[-1]
ggplot() + geom_map(data=total_data_new, aes(map_id=id, fill=PctNew), map=test) + expand_limits(x=test$long, y=test$lat) + labs(title="Voter Registration in Mission District Precincts (2012)") + theme(panel.background=element_blank(), axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), axis.ticks=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), title=element_text(family="Helvetica", size=16), legend.title=element_text(family="Helvetica", size=12), legend.text=element_text(family="Helvetica", size=12)) + scale_fill_gradientn(colours=new_greens, limits=c(.01, 1), labels=percent, na.value="lightslategray", name="Pct. of Precinct's Voting Age Population", oob=censor)
ggplot() + geom_map(data=data_2014, aes(map_id=id, fill=PctNew), map=test) + expand_limits(x=test$long, y=test$lat) + labs(title="Voter Registration in Mission District Precincts (2014)") + theme(panel.background=element_blank(), axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), axis.ticks=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), title=element_text(family="Helvetica", size=16), legend.title=element_text(family="Helvetica", size=12), legend.text=element_text(family="Helvetica", size=12)) + scale_fill_gradientn(colours=new_greens, limits=c(.01, 1), labels=percent, na.value="lightslategray", name="Pct. of Precinct's Voting Age Population", oob=censor)
require(knitr)
require(markdown)
knit('nba_rankings.Rmd', 'nba_rankings.md')
knit('~/Desktop/R Stuff/nba_rankings/nba_rankings.Rmd', 'nba_rankings.md')
setwd("~/Desktop/R Stuff/nba_rankings")
knit('nba_rankings.Rmd', 'nba_rankings.md')
markdownToHTML('nba_rankings.md', 'nba_rankings.html')
markdownToHTML('nba_rankings.md', 'nba_rankings.html')
require(rmarkdown)
render('nba_rankings.Rmd', html_document())
run('nba_rankings.Rmd')
library(rCharts)
teams <- c("76ers", "Bucks", "Bulls", "Cavaliers", "Celtics", "Clippers", "Grizzlies", "Hawks", "Heat", "Hornets", "Jazz",
"Kings", "Knicks", "Lakers", "Magic", "Mavericks", "Nets", "Nuggets", "Pacers", "Pelicans", "Pistons",
"Raptors", "Rockets", "Spurs", "Suns", "Thunder", "Timberwolves", "Trail Blazers", "Warriors", "Wizards", "League Average")
new_cols <- c("#ED174C", "#00471B", "#CE1141", "#860038", "#008348", "#ED174C", "#0F586C", "#E13A3E", "#98002E",
"#1D1160", "#002B5C", "#724C9F", "#F58426", "#FDB927", "#007DC5", "#007DC5", "#061922", "#4D90CD",
"#00275D", "#002B5C", "#ED174C", "#CE1141", "#CE1141", "#8E9090", "#E56020", "#007DC3", "#005083",
"#E03A3E", "#FDB927", "#E31837", "#061922")
avgs <- aggregate(Rank ~ Team, nba_rankings, mean)
#p <- rPlot("Team", "Rank", color=new_cols, data=avgs, type='bar')
p <- dPlot(x="Team", y="Rank", data=avgs, type="bar", bounds = list( x = 50, y = 50, width = 500, height = 250))
#p$guides(x=list(numticks=30))
p$xAxis(orderRule = "Team")
p
head(avgs)
p <- dPlot(x="Rank", y="Team", data=avgs, type="bar", bounds = list( x = 50, y = 50, width = 500, height = 250))
#p$guides(x=list(numticks=30))
p$yAxis(orderRule = "Team")
p
p <- dPlot(x="Rank", y=as.factor("Team"), data=avgs, type="bar", bounds = list( x = 50, y = 50, width = 500, height = 250))
#p$guides(x=list(numticks=30))
p$yAxis(orderRule = "Team")
p
Team
p <- dPlot(x="Team", y="Rank", data=avgs, type="bar", bounds = list( x = 50, y = 50, width = 500, height = 250))
#p$guides(x=list(numticks=30))
p$xAxis(orderRule = "Team")
p
